using DifferentialEquations, LinearAlgebra, SparseArrays
using Plots

# Physical parameters
ρ1 = 1.0        # Density of fluid 1
ρ2 = 0.8        # Density of fluid 2
μ1 = 0.01       # Viscosity of fluid 1
μ2 = 0.02       # Viscosity of fluid 2
σ = 0.07        # Surface tension
g = 9.81        # Gravitational acceleration
A = 0.1         # Amplitude of oscillation
f = 50.0        # Frequency of oscillation
Lx, Ly = 1.0, 1.0  # Domain size
Nx, Ny = 100, 100  # Grid points
hx, hy = Lx/Nx, Ly/Ny  # Grid spacing
dt = 0.001      # Time step
t_end = 1.0     # End time

# Grid
x = LinRange(0, Lx, Nx)
y = LinRange(0, Ly, Ny)

# Initialize fields
ψ = zeros(Nx, Ny)    # Stream function
ω = zeros(Nx, Ny)    # Vorticity
p = zeros(Nx, Ny)    # Pressure
ϕ = zeros(Nx, Ny)    # Level set function

# Helper function for Jacobian term (advection)
function jacobian_term(ψ, ω, hx, hy)
    J = zeros(Nx, Ny)
    for i in 2:Nx-1, j in 2:Ny-1
        J[i, j] = (ψ[i+1, j] - ψ[i-1, j]) * (ω[i, j+1] - ω[i, j-1]) / (4 * hx * hy) -
                  (ψ[i, j+1] - ψ[i, j-1]) * (ω[i+1, j] - ω[i-1, j]) / (4 * hx * hy)
    end
    return J
end

# Approximate Dirac Delta function
function dirac_delta(ϕ, ε)
    return ε ./ (π * (ϕ.^2 .+ ε^2))
end

# Function to compute curvature
function compute_curvature(ϕ, hx, hy)
    ∇ϕ_x = (ϕ[3:end, 2:end-1] - ϕ[1:end-2, 2:end-1]) / (2 * hx)
    ∇ϕ_y = (ϕ[2:end-1, 3:end] - ϕ[2:end-1, 1:end-2]) / (2 * hy)
    ∇ϕ_xx = (ϕ[3:end, 2:end-1] - 2 * ϕ[2:end-1, 2:end-1] + ϕ[1:end-2, 2:end-1]) / hx^2
    ∇ϕ_yy = (ϕ[2:end-1, 3:end] - 2 * ϕ[2:end-1, 2:end-1] + ϕ[2:end-1, 1:end-2]) / hy^2
    κ = (∇ϕ_xx .+ ∇ϕ_yy) ./ sqrt.(∇ϕ_x.^2 .+ ∇ϕ_y.^2 .+ 1e-8)  # Small epsilon to avoid division by zero
    return κ
end

# Function to compute vorticity transport
function vorticity_transport!(dω, ω, ψ, p, ϕ, t, hx, hy)
    # Compute the Jacobian term J(ψ, ω)
    J_ψω = jacobian_term(ψ, ω, hx, hy)[2:end-1, 2:end-1]

    # Baroclinic torque term J(ρ, p)
    J_ρp = jacobian_term(ρ1 .* (ϕ .> 0) .+ ρ2 .* (ϕ .<= 0), p, hx, hy)[2:end-1, 2:end-1]

    # Compute curvature of the interface
    κ = compute_curvature(ϕ, hx, hy)

    # Approximate Dirac delta for surface tension term
    ε = min(hx, hy)
    δ = dirac_delta(ϕ, ε)

    # Surface tension term
    ST_term = σ .* κ .* δ[2:end-1, 2:end-1] .* sqrt.(ϕ[2:end-1, 2:end-1].^2) ./ ρ1

    # Vorticity transport equation
    dω[2:end-1, 2:end-1] .= -J_ψω .+ J_ρp .+ ST_term
end

# Apply boundary conditions
function apply_boundary_conditions!(ψ, ω, p, ϕ)
    # No-slip condition for ψ
    ψ[:, 1] .= 0.0; ψ[:, end] .= 0.0
    ψ[1, :] .= 0.0; ψ[end, :] .= 0.0
    
    # Zero vorticity flux for ω
    ω[:, 1] .= ω[:, 2]
    ω[:, end] .= ω[:, end-1]
    ω[1, :] .= ω[2, :]
    ω[end, :] .= ω[end-1, :]
    
    # Neumann conditions for p and ϕ
    p[:, 1] .= p[:, 2]
    p[:, end] .= p[:, end-1]
    p[1, :] .= p[2, :]
    p[end, :] .= p[end-1, :]

    ϕ[:, 1] .= ϕ[:, 2]
    ϕ[:, end] .= ϕ[:, end-1]
    ϕ[1, :] .= ϕ[2, :]
    ϕ[end, :] .= ϕ[end-1, :]
end

# Function to compute the stream function from vorticity
function stream_function!(ψ, ω, hx, hy)
    # Solve the Poisson equation: ∇²ψ = -ω
    ψ[2:end-1, 2:end-1] .= -ω[2:end-1, 2:end-1] * hx^2 * hy^2 / (2 * (hx^2 + hy^2))
end

# Function to update the level set function (interface tracking)
function level_set_update!(ϕ, ψ, hx, hy, dt)
    # Calculate gradients of ϕ
    ∇ϕ_x = (ϕ[3:end, 2:end-1] - ϕ[1:end-2, 2:end-1]) / (2 * hx)
    ∇ϕ_y = (ϕ[2:end-1, 3:end] - ϕ[2:end-1, 1:end-2]) / (2 * hy)

    # Calculate velocity components from stream function
    u = (ψ[:, 2:end-1] - ψ[:, 1:end-2]) / (2 * hy)  # u = ∂ψ/∂y
    v = -(ψ[2:end-1, :] - ψ[1:end-2, :]) / (2 * hx)  # v = -∂ψ/∂x

    # Update the level set function
    for i in 2:Nx-1, j in 2:Ny-1
        ϕ[i, j] -= dt * (u[i, j-1] * ∇ϕ_x[i-1, j-1] + v[i-1, j] * ∇ϕ_y[i-1, j-1])
    end
end
function solve_faraday_waves!(ψ, ω, p, ϕ, tspan)
    t = tspan[1]
    frames = []
    frame_interval = 0.01  # Collect a frame every 0.01 time units

    while t < tspan[2]
        # Apply boundary conditions
        apply_boundary_conditions!(ψ, ω, p, ϕ)

        # Solve stream function equation
        stream_function!(ψ, ω, hx, hy)

        # Update velocity field from stream function
        u = (ψ[:, 2:end-1] - ψ[:, 1:end-2]) / (2 * hy)  # u = ∂ψ/∂y
        v = -(ψ[2:end-1, :] - ψ[1:end-2, :]) / (2 * hx)  # v = -∂ψ/∂x

        # Update level set function
        level_set_update!(ϕ, ψ, hx, hy, dt)

        # Update vorticity
        vorticity_transport!(ω, ω, ψ, p, ϕ, t, hx, hy)

        # Collect frame if it's time
        if t % frame_interval < dt
            frame = heatmap(ϕ, title="Faraday Waves at t=$(round(t, digits=2))", 
                            xlabel="x", ylabel="y", color=:inferno, 
                            clim=(-1, 1))  # Set color limits for consistency
            push!(frames, frame)
        end

        # Increment time
        t += dt
    end

    return frames
end

# Initial conditions
ψ[:, :] .= 0.0  # Initialize stream function
ω[:, :] .= 0.0  # Initialize vorticity
p[:, :] .= 0.0  # Initialize pressure
ϕ[:, :] .= [sin(2π * x[i] / Lx) for i in 1:Nx, j in 1:Ny]  # Initialize level set

# Time span
tspan = (0.0, t_end)

# Run the simulation
# Run the simulation and collect frames
frames = solve_faraday_waves!(ψ, ω, p, ϕ, tspan)

# Create and save the animated GIF
anim = @animate for i in 1:length(frames)
    plot(frames[i])
end

